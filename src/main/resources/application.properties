server.port=8081

spring.datasource.url=jdbc:mysql://localhost:3306/csm_system
spring.datasource.username=root
spring.datasource.password=Volvo01Xbox1!

spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect
spring.jpa.hibernate.ddl-auto=update

# enable all the actuator endpoints:
management.endpoints.web.exposure.include=*
# enable the view of info endpoint:
management.info.env.enabled=true

#show health information
#localhost:8081/actuator/health
management.endpoint.health.show-details=always

# /info endpoint - if we added any information about the application in application.properties
# then we can view it using /info endpoint:
#localhost:8081/actuator/info
info.app.name=Spring Boot Restful Web Services
info.app.description=CSM-System Spring Boot Demo
info.app.version=1.0.0

#the beans endpoints - show all the beans registered in our application;
# including beans we explicitly configured and those autoconfigured by Spring Boot;
# localhost:8081/actuator/beans;

# localhost:8081/actuator/conditions - shows the autoconfiguration report;
# categorised into positiveMatches and negativeMatches;

# localhost:8081/actuator/mappings;
# the /mappings endpoints shows all teh @RequestMappings paths declared in our application;
# this is very helpful for checking which request path will be handled by which controller method;

# localhost:8081/actuator/configprops;
# the /configprops endpoint offers all the configuration properties defined by @ConfigurationProperties bean,
# including our configuration properties defined in the application.properties or YAML file;

# localhost:8081/actuator/metrics;
# the /metrics endpoint shows various metrics about the current application such as how much memory it
# is using, how much memory is free, the size of the heap used, the number of thread used, and so on...;

# localhost:8081/actuator/env;
# the /env endpoint exposes all the properties from the Spring's ConfigurableEnvironment interface,
# such as a list of active profiles, application properties, system environment variables and so on...;

# localhost:8081/actuator/loggers
# localhost:8081/actuator/loggers/{name}
# localhost:8081/actuator/loggers/net.javaguides.springboot
# the /loggers endpoint allows us to view and configure the log levels of our application at runtime

# localhost:8081/actuator/shutdown
# the /shutdown endpoint can be used to gracefully shut down the application;
# this endpoint is not enabled by default;
# we can enable it in application.properties file:
management.endpoint.shutdown.enabled=true
# after adding this property we need to sent HTTP POST request to below endpoint:
# localhost:8081/actuator/shutdown


